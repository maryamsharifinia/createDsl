# Generated from F:/University/compiler/pych/compiler/my_dsl/grammar/ExampleDSL.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,65,503,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
        5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,
        1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,
        1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,
        1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,
        1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,
        1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
        1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,
        1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,39,
        1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,
        1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,46,
        1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,
        1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,52,
        1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,55,
        1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,
        1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
        1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,61,4,61,
        477,8,61,11,61,12,61,478,1,62,1,62,5,62,483,8,62,10,62,12,62,486,
        9,62,1,62,1,62,1,63,1,63,5,63,492,8,63,10,63,12,63,495,9,63,1,64,
        4,64,498,8,64,11,64,12,64,499,1,64,1,64,1,484,0,65,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
        27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,
        38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,
        49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,
        117,59,119,60,121,61,123,62,125,63,127,64,129,65,1,0,4,1,0,48,57,
        3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,
        13,32,32,506,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
        1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
        1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
        1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
        1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,
        0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,
        0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,
        127,1,0,0,0,0,129,1,0,0,0,1,131,1,0,0,0,3,133,1,0,0,0,5,135,1,0,
        0,0,7,137,1,0,0,0,9,141,1,0,0,0,11,147,1,0,0,0,13,152,1,0,0,0,15,
        154,1,0,0,0,17,156,1,0,0,0,19,163,1,0,0,0,21,170,1,0,0,0,23,176,
        1,0,0,0,25,183,1,0,0,0,27,190,1,0,0,0,29,196,1,0,0,0,31,204,1,0,
        0,0,33,212,1,0,0,0,35,216,1,0,0,0,37,223,1,0,0,0,39,230,1,0,0,0,
        41,235,1,0,0,0,43,242,1,0,0,0,45,248,1,0,0,0,47,257,1,0,0,0,49,265,
        1,0,0,0,51,271,1,0,0,0,53,278,1,0,0,0,55,285,1,0,0,0,57,293,1,0,
        0,0,59,300,1,0,0,0,61,306,1,0,0,0,63,313,1,0,0,0,65,317,1,0,0,0,
        67,322,1,0,0,0,69,327,1,0,0,0,71,334,1,0,0,0,73,339,1,0,0,0,75,346,
        1,0,0,0,77,354,1,0,0,0,79,359,1,0,0,0,81,364,1,0,0,0,83,368,1,0,
        0,0,85,378,1,0,0,0,87,385,1,0,0,0,89,388,1,0,0,0,91,395,1,0,0,0,
        93,398,1,0,0,0,95,403,1,0,0,0,97,407,1,0,0,0,99,410,1,0,0,0,101,
        415,1,0,0,0,103,421,1,0,0,0,105,424,1,0,0,0,107,427,1,0,0,0,109,
        431,1,0,0,0,111,434,1,0,0,0,113,439,1,0,0,0,115,445,1,0,0,0,117,
        449,1,0,0,0,119,453,1,0,0,0,121,465,1,0,0,0,123,476,1,0,0,0,125,
        480,1,0,0,0,127,489,1,0,0,0,129,497,1,0,0,0,131,132,5,59,0,0,132,
        2,1,0,0,0,133,134,5,40,0,0,134,4,1,0,0,0,135,136,5,41,0,0,136,6,
        1,0,0,0,137,138,5,100,0,0,138,139,5,97,0,0,139,140,5,121,0,0,140,
        8,1,0,0,0,141,142,5,109,0,0,142,143,5,111,0,0,143,144,5,110,0,0,
        144,145,5,116,0,0,145,146,5,104,0,0,146,10,1,0,0,0,147,148,5,121,
        0,0,148,149,5,101,0,0,149,150,5,97,0,0,150,151,5,114,0,0,151,12,
        1,0,0,0,152,153,5,44,0,0,153,14,1,0,0,0,154,155,5,62,0,0,155,16,
        1,0,0,0,156,157,5,101,0,0,157,158,5,120,0,0,158,159,5,112,0,0,159,
        160,5,111,0,0,160,161,5,114,0,0,161,162,5,116,0,0,162,18,1,0,0,0,
        163,164,5,105,0,0,164,165,5,109,0,0,165,166,5,112,0,0,166,167,5,
        111,0,0,167,168,5,114,0,0,168,169,5,116,0,0,169,20,1,0,0,0,170,171,
        5,105,0,0,171,172,5,110,0,0,172,173,5,112,0,0,173,174,5,117,0,0,
        174,175,5,116,0,0,175,22,1,0,0,0,176,177,5,111,0,0,177,178,5,117,
        0,0,178,179,5,116,0,0,179,180,5,112,0,0,180,181,5,117,0,0,181,182,
        5,116,0,0,182,24,1,0,0,0,183,184,5,114,0,0,184,185,5,101,0,0,185,
        186,5,112,0,0,186,187,5,111,0,0,187,188,5,114,0,0,188,189,5,116,
        0,0,189,26,1,0,0,0,190,191,5,119,0,0,191,192,5,114,0,0,192,193,5,
        105,0,0,193,194,5,116,0,0,194,195,5,101,0,0,195,28,1,0,0,0,196,197,
        5,67,0,0,197,198,5,111,0,0,198,199,5,109,0,0,199,200,5,98,0,0,200,
        201,5,105,0,0,201,202,5,110,0,0,202,203,5,101,0,0,203,30,1,0,0,0,
        204,205,5,67,0,0,205,206,5,111,0,0,206,207,5,110,0,0,207,208,5,118,
        0,0,208,209,5,101,0,0,209,210,5,114,0,0,210,211,5,116,0,0,211,32,
        1,0,0,0,212,213,5,65,0,0,213,214,5,100,0,0,214,215,5,100,0,0,215,
        34,1,0,0,0,216,217,5,82,0,0,217,218,5,101,0,0,218,219,5,110,0,0,
        219,220,5,97,0,0,220,221,5,109,0,0,221,222,5,101,0,0,222,36,1,0,
        0,0,223,224,5,67,0,0,224,225,5,104,0,0,225,226,5,97,0,0,226,227,
        5,110,0,0,227,228,5,103,0,0,228,229,5,101,0,0,229,38,1,0,0,0,230,
        231,5,83,0,0,231,232,5,111,0,0,232,233,5,114,0,0,233,234,5,116,0,
        0,234,40,1,0,0,0,235,236,5,68,0,0,236,237,5,101,0,0,237,238,5,108,
        0,0,238,239,5,101,0,0,239,240,5,116,0,0,240,241,5,101,0,0,241,42,
        1,0,0,0,242,243,5,65,0,0,243,244,5,112,0,0,244,245,5,112,0,0,245,
        246,5,108,0,0,246,247,5,121,0,0,247,44,1,0,0,0,248,249,5,71,0,0,
        249,250,5,101,0,0,250,251,5,110,0,0,251,252,5,101,0,0,252,253,5,
        114,0,0,253,254,5,97,0,0,254,255,5,116,0,0,255,256,5,101,0,0,256,
        46,1,0,0,0,257,258,5,82,0,0,258,259,5,101,0,0,259,260,5,111,0,0,
        260,261,5,114,0,0,261,262,5,100,0,0,262,263,5,101,0,0,263,264,5,
        114,0,0,264,48,1,0,0,0,265,266,5,71,0,0,266,267,5,114,0,0,267,268,
        5,111,0,0,268,269,5,117,0,0,269,270,5,112,0,0,270,50,1,0,0,0,271,
        272,5,70,0,0,272,273,5,105,0,0,273,274,5,108,0,0,274,275,5,116,0,
        0,275,276,5,101,0,0,276,277,5,114,0,0,277,52,1,0,0,0,278,279,5,83,
        0,0,279,280,5,101,0,0,280,281,5,97,0,0,281,282,5,114,0,0,282,283,
        5,99,0,0,283,284,5,104,0,0,284,54,1,0,0,0,285,286,5,82,0,0,286,287,
        5,101,0,0,287,288,5,112,0,0,288,289,5,108,0,0,289,290,5,97,0,0,290,
        291,5,99,0,0,291,292,5,101,0,0,292,56,1,0,0,0,293,294,5,82,0,0,294,
        295,5,101,0,0,295,296,5,109,0,0,296,297,5,111,0,0,297,298,5,118,
        0,0,298,299,5,101,0,0,299,58,1,0,0,0,300,301,5,83,0,0,301,302,5,
        112,0,0,302,303,5,108,0,0,303,304,5,105,0,0,304,305,5,116,0,0,305,
        60,1,0,0,0,306,307,5,82,0,0,307,308,5,101,0,0,308,309,5,115,0,0,
        309,310,5,105,0,0,310,311,5,122,0,0,311,312,5,101,0,0,312,62,1,0,
        0,0,313,314,5,83,0,0,314,315,5,101,0,0,315,316,5,116,0,0,316,64,
        1,0,0,0,317,318,5,102,0,0,318,319,5,105,0,0,319,320,5,108,0,0,320,
        321,5,101,0,0,321,66,1,0,0,0,322,323,5,112,0,0,323,324,5,97,0,0,
        324,325,5,116,0,0,325,326,5,104,0,0,326,68,1,0,0,0,327,328,5,102,
        0,0,328,329,5,111,0,0,329,330,5,114,0,0,330,331,5,109,0,0,331,332,
        5,97,0,0,332,333,5,116,0,0,333,70,1,0,0,0,334,335,5,100,0,0,335,
        336,5,97,0,0,336,337,5,116,0,0,337,338,5,97,0,0,338,72,1,0,0,0,339,
        340,5,99,0,0,340,341,5,111,0,0,341,342,5,108,0,0,342,343,5,117,0,
        0,343,344,5,109,0,0,344,345,5,110,0,0,345,74,1,0,0,0,346,347,5,99,
        0,0,347,348,5,111,0,0,348,349,5,108,0,0,349,350,5,117,0,0,350,351,
        5,109,0,0,351,352,5,110,0,0,352,353,5,115,0,0,353,76,1,0,0,0,354,
        355,5,116,0,0,355,356,5,121,0,0,356,357,5,112,0,0,357,358,5,101,
        0,0,358,78,1,0,0,0,359,360,5,114,0,0,360,361,5,111,0,0,361,362,5,
        119,0,0,362,363,5,115,0,0,363,80,1,0,0,0,364,365,5,114,0,0,365,366,
        5,111,0,0,366,367,5,119,0,0,367,82,1,0,0,0,368,369,5,99,0,0,369,
        370,5,111,0,0,370,371,5,110,0,0,371,372,5,100,0,0,372,373,5,105,
        0,0,373,374,5,116,0,0,374,375,5,105,0,0,375,376,5,111,0,0,376,377,
        5,110,0,0,377,84,1,0,0,0,378,379,5,118,0,0,379,380,5,97,0,0,380,
        381,5,108,0,0,381,382,5,117,0,0,382,383,5,101,0,0,383,384,5,115,
        0,0,384,86,1,0,0,0,385,386,5,105,0,0,386,387,5,110,0,0,387,88,1,
        0,0,0,388,389,5,114,0,0,389,390,5,101,0,0,390,391,5,115,0,0,391,
        392,5,117,0,0,392,393,5,108,0,0,393,394,5,116,0,0,394,90,1,0,0,0,
        395,396,5,116,0,0,396,397,5,111,0,0,397,92,1,0,0,0,398,399,5,119,
        0,0,399,400,5,105,0,0,400,401,5,116,0,0,401,402,5,104,0,0,402,94,
        1,0,0,0,403,404,5,97,0,0,404,405,5,110,0,0,405,406,5,100,0,0,406,
        96,1,0,0,0,407,408,5,98,0,0,408,409,5,121,0,0,409,98,1,0,0,0,410,
        411,5,102,0,0,411,412,5,114,0,0,412,413,5,111,0,0,413,414,5,109,
        0,0,414,100,1,0,0,0,415,416,5,119,0,0,416,417,5,104,0,0,417,418,
        5,101,0,0,418,419,5,114,0,0,419,420,5,101,0,0,420,102,1,0,0,0,421,
        422,5,111,0,0,422,423,5,110,0,0,423,104,1,0,0,0,424,425,5,111,0,
        0,425,426,5,102,0,0,426,106,1,0,0,0,427,428,5,102,0,0,428,429,5,
        111,0,0,429,430,5,114,0,0,430,108,1,0,0,0,431,432,5,97,0,0,432,433,
        5,115,0,0,433,110,1,0,0,0,434,435,5,115,0,0,435,436,5,97,0,0,436,
        437,5,118,0,0,437,438,5,101,0,0,438,112,1,0,0,0,439,440,5,98,0,0,
        440,441,5,97,0,0,441,442,5,115,0,0,442,443,5,101,0,0,443,444,5,100,
        0,0,444,114,1,0,0,0,445,446,5,115,0,0,446,447,5,117,0,0,447,448,
        5,109,0,0,448,116,1,0,0,0,449,450,5,110,0,0,450,451,5,101,0,0,451,
        452,5,119,0,0,452,118,1,0,0,0,453,454,5,109,0,0,454,455,5,117,0,
        0,455,456,5,108,0,0,456,457,5,116,0,0,457,458,5,105,0,0,458,459,
        5,112,0,0,459,460,5,108,0,0,460,461,5,121,0,0,461,462,5,105,0,0,
        462,463,5,110,0,0,463,464,5,103,0,0,464,120,1,0,0,0,465,466,5,100,
        0,0,466,467,5,117,0,0,467,468,5,112,0,0,468,469,5,108,0,0,469,470,
        5,105,0,0,470,471,5,99,0,0,471,472,5,97,0,0,472,473,5,116,0,0,473,
        474,5,101,0,0,474,122,1,0,0,0,475,477,7,0,0,0,476,475,1,0,0,0,477,
        478,1,0,0,0,478,476,1,0,0,0,478,479,1,0,0,0,479,124,1,0,0,0,480,
        484,5,34,0,0,481,483,9,0,0,0,482,481,1,0,0,0,483,486,1,0,0,0,484,
        485,1,0,0,0,484,482,1,0,0,0,485,487,1,0,0,0,486,484,1,0,0,0,487,
        488,5,34,0,0,488,126,1,0,0,0,489,493,7,1,0,0,490,492,7,2,0,0,491,
        490,1,0,0,0,492,495,1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,0,494,
        128,1,0,0,0,495,493,1,0,0,0,496,498,7,3,0,0,497,496,1,0,0,0,498,
        499,1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,501,1,0,0,0,501,
        502,6,64,0,0,502,130,1,0,0,0,5,0,478,484,493,499,1,6,0,0
    ]

class ExampleDSLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    EXPORT = 9
    IMPORT = 10
    INPUT = 11
    OUTPUT = 12
    REPORT = 13
    WRITE = 14
    COMBINE = 15
    CONVERT = 16
    ADD = 17
    RENAME = 18
    CHANGE = 19
    SORT = 20
    DELETE = 21
    APPLY = 22
    GENERATE = 23
    REORDER = 24
    GROUP = 25
    FILTER = 26
    SEARCH = 27
    REPLACE = 28
    REMOVE = 29
    SPLIT = 30
    RESIZE = 31
    SET = 32
    FILE = 33
    PATH = 34
    FORMAT = 35
    DATA = 36
    COLUMN = 37
    COLUMNS = 38
    TYPE = 39
    ROWS = 40
    ROW = 41
    CONDITION = 42
    VALUES = 43
    IN = 44
    RESULT = 45
    TO = 46
    WITH = 47
    AND = 48
    BY = 49
    FROM = 50
    WHERE = 51
    ON = 52
    OF = 53
    FOR = 54
    AS = 55
    SAVE = 56
    BASED = 57
    SUM = 58
    NEW = 59
    MULTIPLYING = 60
    DUPLICATE = 61
    NUMBER = 62
    STRING = 63
    ID = 64
    WS = 65

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'('", "')'", "'day'", "'month'", "'year'", "','", "'>'", 
            "'export'", "'import'", "'input'", "'output'", "'report'", "'write'", 
            "'Combine'", "'Convert'", "'Add'", "'Rename'", "'Change'", "'Sort'", 
            "'Delete'", "'Apply'", "'Generate'", "'Reorder'", "'Group'", 
            "'Filter'", "'Search'", "'Replace'", "'Remove'", "'Split'", 
            "'Resize'", "'Set'", "'file'", "'path'", "'format'", "'data'", 
            "'column'", "'columns'", "'type'", "'rows'", "'row'", "'condition'", 
            "'values'", "'in'", "'result'", "'to'", "'with'", "'and'", "'by'", 
            "'from'", "'where'", "'on'", "'of'", "'for'", "'as'", "'save'", 
            "'based'", "'sum'", "'new'", "'multiplying'", "'duplicate'" ]

    symbolicNames = [ "<INVALID>",
            "EXPORT", "IMPORT", "INPUT", "OUTPUT", "REPORT", "WRITE", "COMBINE", 
            "CONVERT", "ADD", "RENAME", "CHANGE", "SORT", "DELETE", "APPLY", 
            "GENERATE", "REORDER", "GROUP", "FILTER", "SEARCH", "REPLACE", 
            "REMOVE", "SPLIT", "RESIZE", "SET", "FILE", "PATH", "FORMAT", 
            "DATA", "COLUMN", "COLUMNS", "TYPE", "ROWS", "ROW", "CONDITION", 
            "VALUES", "IN", "RESULT", "TO", "WITH", "AND", "BY", "FROM", 
            "WHERE", "ON", "OF", "FOR", "AS", "SAVE", "BASED", "SUM", "NEW", 
            "MULTIPLYING", "DUPLICATE", "NUMBER", "STRING", "ID", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "EXPORT", "IMPORT", "INPUT", "OUTPUT", "REPORT", 
                  "WRITE", "COMBINE", "CONVERT", "ADD", "RENAME", "CHANGE", 
                  "SORT", "DELETE", "APPLY", "GENERATE", "REORDER", "GROUP", 
                  "FILTER", "SEARCH", "REPLACE", "REMOVE", "SPLIT", "RESIZE", 
                  "SET", "FILE", "PATH", "FORMAT", "DATA", "COLUMN", "COLUMNS", 
                  "TYPE", "ROWS", "ROW", "CONDITION", "VALUES", "IN", "RESULT", 
                  "TO", "WITH", "AND", "BY", "FROM", "WHERE", "ON", "OF", 
                  "FOR", "AS", "SAVE", "BASED", "SUM", "NEW", "MULTIPLYING", 
                  "DUPLICATE", "NUMBER", "STRING", "ID", "WS" ]

    grammarFileName = "ExampleDSL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


