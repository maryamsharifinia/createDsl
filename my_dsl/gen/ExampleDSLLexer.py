# Generated from C:/Users/Ali/Desktop/test_compiler/createDsl/my_dsl/grammar/ExampleDSL.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,66,536,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,
        1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,216,
        8,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,
        1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,
        1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,
        1,35,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
        1,39,1,39,1,39,1,39,1,39,3,39,391,8,39,1,40,1,40,1,40,1,40,1,40,
        1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,
        1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,51,
        1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,
        1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,
        1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,60,1,60,
        1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,62,4,62,510,8,62,11,62,12,62,
        511,1,63,1,63,5,63,516,8,63,10,63,12,63,519,9,63,1,63,1,63,1,64,
        1,64,5,64,525,8,64,10,64,12,64,528,9,64,1,65,4,65,531,8,65,11,65,
        12,65,532,1,65,1,65,1,517,0,66,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
        41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,
        103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,
        61,123,62,125,63,127,64,129,65,131,66,1,0,5,2,0,60,60,62,62,1,0,
        48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,
        10,13,13,32,32,548,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
        0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
        0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
        0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,
        0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,
        0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,
        117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,
        0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,1,133,1,0,0,0,3,135,
        1,0,0,0,5,137,1,0,0,0,7,141,1,0,0,0,9,147,1,0,0,0,11,152,1,0,0,0,
        13,154,1,0,0,0,15,156,1,0,0,0,17,158,1,0,0,0,19,165,1,0,0,0,21,172,
        1,0,0,0,23,178,1,0,0,0,25,185,1,0,0,0,27,192,1,0,0,0,29,198,1,0,
        0,0,31,215,1,0,0,0,33,217,1,0,0,0,35,225,1,0,0,0,37,229,1,0,0,0,
        39,236,1,0,0,0,41,243,1,0,0,0,43,248,1,0,0,0,45,255,1,0,0,0,47,261,
        1,0,0,0,49,270,1,0,0,0,51,278,1,0,0,0,53,284,1,0,0,0,55,291,1,0,
        0,0,57,298,1,0,0,0,59,306,1,0,0,0,61,313,1,0,0,0,63,319,1,0,0,0,
        65,326,1,0,0,0,67,330,1,0,0,0,69,335,1,0,0,0,71,340,1,0,0,0,73,347,
        1,0,0,0,75,352,1,0,0,0,77,359,1,0,0,0,79,390,1,0,0,0,81,392,1,0,
        0,0,83,397,1,0,0,0,85,401,1,0,0,0,87,411,1,0,0,0,89,418,1,0,0,0,
        91,421,1,0,0,0,93,428,1,0,0,0,95,431,1,0,0,0,97,436,1,0,0,0,99,440,
        1,0,0,0,101,443,1,0,0,0,103,448,1,0,0,0,105,454,1,0,0,0,107,457,
        1,0,0,0,109,460,1,0,0,0,111,464,1,0,0,0,113,467,1,0,0,0,115,472,
        1,0,0,0,117,478,1,0,0,0,119,482,1,0,0,0,121,486,1,0,0,0,123,498,
        1,0,0,0,125,509,1,0,0,0,127,513,1,0,0,0,129,522,1,0,0,0,131,530,
        1,0,0,0,133,134,5,59,0,0,134,2,1,0,0,0,135,136,5,44,0,0,136,4,1,
        0,0,0,137,138,5,100,0,0,138,139,5,97,0,0,139,140,5,121,0,0,140,6,
        1,0,0,0,141,142,5,109,0,0,142,143,5,111,0,0,143,144,5,110,0,0,144,
        145,5,116,0,0,145,146,5,104,0,0,146,8,1,0,0,0,147,148,5,121,0,0,
        148,149,5,101,0,0,149,150,5,97,0,0,150,151,5,114,0,0,151,10,1,0,
        0,0,152,153,5,40,0,0,153,12,1,0,0,0,154,155,5,41,0,0,155,14,1,0,
        0,0,156,157,5,62,0,0,157,16,1,0,0,0,158,159,5,101,0,0,159,160,5,
        120,0,0,160,161,5,112,0,0,161,162,5,111,0,0,162,163,5,114,0,0,163,
        164,5,116,0,0,164,18,1,0,0,0,165,166,5,105,0,0,166,167,5,109,0,0,
        167,168,5,112,0,0,168,169,5,111,0,0,169,170,5,114,0,0,170,171,5,
        116,0,0,171,20,1,0,0,0,172,173,5,105,0,0,173,174,5,110,0,0,174,175,
        5,112,0,0,175,176,5,117,0,0,176,177,5,116,0,0,177,22,1,0,0,0,178,
        179,5,111,0,0,179,180,5,117,0,0,180,181,5,116,0,0,181,182,5,112,
        0,0,182,183,5,117,0,0,183,184,5,116,0,0,184,24,1,0,0,0,185,186,5,
        114,0,0,186,187,5,101,0,0,187,188,5,112,0,0,188,189,5,111,0,0,189,
        190,5,114,0,0,190,191,5,116,0,0,191,26,1,0,0,0,192,193,5,119,0,0,
        193,194,5,114,0,0,194,195,5,105,0,0,195,196,5,116,0,0,196,197,5,
        101,0,0,197,28,1,0,0,0,198,199,5,67,0,0,199,200,5,111,0,0,200,201,
        5,109,0,0,201,202,5,98,0,0,202,203,5,105,0,0,203,204,5,110,0,0,204,
        205,5,101,0,0,205,30,1,0,0,0,206,216,7,0,0,0,207,208,5,62,0,0,208,
        216,5,61,0,0,209,210,5,60,0,0,210,216,5,61,0,0,211,212,5,61,0,0,
        212,216,5,61,0,0,213,214,5,33,0,0,214,216,5,61,0,0,215,206,1,0,0,
        0,215,207,1,0,0,0,215,209,1,0,0,0,215,211,1,0,0,0,215,213,1,0,0,
        0,216,32,1,0,0,0,217,218,5,67,0,0,218,219,5,111,0,0,219,220,5,110,
        0,0,220,221,5,118,0,0,221,222,5,101,0,0,222,223,5,114,0,0,223,224,
        5,116,0,0,224,34,1,0,0,0,225,226,5,65,0,0,226,227,5,100,0,0,227,
        228,5,100,0,0,228,36,1,0,0,0,229,230,5,82,0,0,230,231,5,101,0,0,
        231,232,5,110,0,0,232,233,5,97,0,0,233,234,5,109,0,0,234,235,5,101,
        0,0,235,38,1,0,0,0,236,237,5,67,0,0,237,238,5,104,0,0,238,239,5,
        97,0,0,239,240,5,110,0,0,240,241,5,103,0,0,241,242,5,101,0,0,242,
        40,1,0,0,0,243,244,5,83,0,0,244,245,5,111,0,0,245,246,5,114,0,0,
        246,247,5,116,0,0,247,42,1,0,0,0,248,249,5,68,0,0,249,250,5,101,
        0,0,250,251,5,108,0,0,251,252,5,101,0,0,252,253,5,116,0,0,253,254,
        5,101,0,0,254,44,1,0,0,0,255,256,5,65,0,0,256,257,5,112,0,0,257,
        258,5,112,0,0,258,259,5,108,0,0,259,260,5,121,0,0,260,46,1,0,0,0,
        261,262,5,71,0,0,262,263,5,101,0,0,263,264,5,110,0,0,264,265,5,101,
        0,0,265,266,5,114,0,0,266,267,5,97,0,0,267,268,5,116,0,0,268,269,
        5,101,0,0,269,48,1,0,0,0,270,271,5,82,0,0,271,272,5,101,0,0,272,
        273,5,111,0,0,273,274,5,114,0,0,274,275,5,100,0,0,275,276,5,101,
        0,0,276,277,5,114,0,0,277,50,1,0,0,0,278,279,5,71,0,0,279,280,5,
        114,0,0,280,281,5,111,0,0,281,282,5,117,0,0,282,283,5,112,0,0,283,
        52,1,0,0,0,284,285,5,70,0,0,285,286,5,105,0,0,286,287,5,108,0,0,
        287,288,5,116,0,0,288,289,5,101,0,0,289,290,5,114,0,0,290,54,1,0,
        0,0,291,292,5,83,0,0,292,293,5,101,0,0,293,294,5,97,0,0,294,295,
        5,114,0,0,295,296,5,99,0,0,296,297,5,104,0,0,297,56,1,0,0,0,298,
        299,5,82,0,0,299,300,5,101,0,0,300,301,5,112,0,0,301,302,5,108,0,
        0,302,303,5,97,0,0,303,304,5,99,0,0,304,305,5,101,0,0,305,58,1,0,
        0,0,306,307,5,82,0,0,307,308,5,101,0,0,308,309,5,109,0,0,309,310,
        5,111,0,0,310,311,5,118,0,0,311,312,5,101,0,0,312,60,1,0,0,0,313,
        314,5,83,0,0,314,315,5,112,0,0,315,316,5,108,0,0,316,317,5,105,0,
        0,317,318,5,116,0,0,318,62,1,0,0,0,319,320,5,82,0,0,320,321,5,101,
        0,0,321,322,5,115,0,0,322,323,5,105,0,0,323,324,5,122,0,0,324,325,
        5,101,0,0,325,64,1,0,0,0,326,327,5,83,0,0,327,328,5,101,0,0,328,
        329,5,116,0,0,329,66,1,0,0,0,330,331,5,102,0,0,331,332,5,105,0,0,
        332,333,5,108,0,0,333,334,5,101,0,0,334,68,1,0,0,0,335,336,5,112,
        0,0,336,337,5,97,0,0,337,338,5,116,0,0,338,339,5,104,0,0,339,70,
        1,0,0,0,340,341,5,102,0,0,341,342,5,111,0,0,342,343,5,114,0,0,343,
        344,5,109,0,0,344,345,5,97,0,0,345,346,5,116,0,0,346,72,1,0,0,0,
        347,348,5,100,0,0,348,349,5,97,0,0,349,350,5,116,0,0,350,351,5,97,
        0,0,351,74,1,0,0,0,352,353,5,99,0,0,353,354,5,111,0,0,354,355,5,
        108,0,0,355,356,5,117,0,0,356,357,5,109,0,0,357,358,5,110,0,0,358,
        76,1,0,0,0,359,360,5,99,0,0,360,361,5,111,0,0,361,362,5,108,0,0,
        362,363,5,117,0,0,363,364,5,109,0,0,364,365,5,110,0,0,365,366,5,
        115,0,0,366,78,1,0,0,0,367,368,5,102,0,0,368,369,5,108,0,0,369,370,
        5,111,0,0,370,371,5,97,0,0,371,391,5,116,0,0,372,373,5,115,0,0,373,
        374,5,116,0,0,374,391,5,114,0,0,375,376,5,105,0,0,376,377,5,110,
        0,0,377,391,5,116,0,0,378,379,5,98,0,0,379,380,5,111,0,0,380,381,
        5,111,0,0,381,391,5,108,0,0,382,383,5,100,0,0,383,384,5,97,0,0,384,
        385,5,116,0,0,385,391,5,101,0,0,386,387,5,116,0,0,387,388,5,121,
        0,0,388,389,5,112,0,0,389,391,5,101,0,0,390,367,1,0,0,0,390,372,
        1,0,0,0,390,375,1,0,0,0,390,378,1,0,0,0,390,382,1,0,0,0,390,386,
        1,0,0,0,391,80,1,0,0,0,392,393,5,114,0,0,393,394,5,111,0,0,394,395,
        5,119,0,0,395,396,5,115,0,0,396,82,1,0,0,0,397,398,5,114,0,0,398,
        399,5,111,0,0,399,400,5,119,0,0,400,84,1,0,0,0,401,402,5,99,0,0,
        402,403,5,111,0,0,403,404,5,110,0,0,404,405,5,100,0,0,405,406,5,
        105,0,0,406,407,5,116,0,0,407,408,5,105,0,0,408,409,5,111,0,0,409,
        410,5,110,0,0,410,86,1,0,0,0,411,412,5,118,0,0,412,413,5,97,0,0,
        413,414,5,108,0,0,414,415,5,117,0,0,415,416,5,101,0,0,416,417,5,
        115,0,0,417,88,1,0,0,0,418,419,5,105,0,0,419,420,5,110,0,0,420,90,
        1,0,0,0,421,422,5,114,0,0,422,423,5,101,0,0,423,424,5,115,0,0,424,
        425,5,117,0,0,425,426,5,108,0,0,426,427,5,116,0,0,427,92,1,0,0,0,
        428,429,5,116,0,0,429,430,5,111,0,0,430,94,1,0,0,0,431,432,5,119,
        0,0,432,433,5,105,0,0,433,434,5,116,0,0,434,435,5,104,0,0,435,96,
        1,0,0,0,436,437,5,97,0,0,437,438,5,110,0,0,438,439,5,100,0,0,439,
        98,1,0,0,0,440,441,5,98,0,0,441,442,5,121,0,0,442,100,1,0,0,0,443,
        444,5,102,0,0,444,445,5,114,0,0,445,446,5,111,0,0,446,447,5,109,
        0,0,447,102,1,0,0,0,448,449,5,119,0,0,449,450,5,104,0,0,450,451,
        5,101,0,0,451,452,5,114,0,0,452,453,5,101,0,0,453,104,1,0,0,0,454,
        455,5,111,0,0,455,456,5,110,0,0,456,106,1,0,0,0,457,458,5,111,0,
        0,458,459,5,102,0,0,459,108,1,0,0,0,460,461,5,102,0,0,461,462,5,
        111,0,0,462,463,5,114,0,0,463,110,1,0,0,0,464,465,5,97,0,0,465,466,
        5,115,0,0,466,112,1,0,0,0,467,468,5,115,0,0,468,469,5,97,0,0,469,
        470,5,118,0,0,470,471,5,101,0,0,471,114,1,0,0,0,472,473,5,98,0,0,
        473,474,5,97,0,0,474,475,5,115,0,0,475,476,5,101,0,0,476,477,5,100,
        0,0,477,116,1,0,0,0,478,479,5,115,0,0,479,480,5,117,0,0,480,481,
        5,109,0,0,481,118,1,0,0,0,482,483,5,110,0,0,483,484,5,101,0,0,484,
        485,5,119,0,0,485,120,1,0,0,0,486,487,5,109,0,0,487,488,5,117,0,
        0,488,489,5,108,0,0,489,490,5,116,0,0,490,491,5,105,0,0,491,492,
        5,112,0,0,492,493,5,108,0,0,493,494,5,121,0,0,494,495,5,105,0,0,
        495,496,5,110,0,0,496,497,5,103,0,0,497,122,1,0,0,0,498,499,5,100,
        0,0,499,500,5,117,0,0,500,501,5,112,0,0,501,502,5,108,0,0,502,503,
        5,105,0,0,503,504,5,99,0,0,504,505,5,97,0,0,505,506,5,116,0,0,506,
        507,5,101,0,0,507,124,1,0,0,0,508,510,7,1,0,0,509,508,1,0,0,0,510,
        511,1,0,0,0,511,509,1,0,0,0,511,512,1,0,0,0,512,126,1,0,0,0,513,
        517,5,34,0,0,514,516,9,0,0,0,515,514,1,0,0,0,516,519,1,0,0,0,517,
        518,1,0,0,0,517,515,1,0,0,0,518,520,1,0,0,0,519,517,1,0,0,0,520,
        521,5,34,0,0,521,128,1,0,0,0,522,526,7,2,0,0,523,525,7,3,0,0,524,
        523,1,0,0,0,525,528,1,0,0,0,526,524,1,0,0,0,526,527,1,0,0,0,527,
        130,1,0,0,0,528,526,1,0,0,0,529,531,7,4,0,0,530,529,1,0,0,0,531,
        532,1,0,0,0,532,530,1,0,0,0,532,533,1,0,0,0,533,534,1,0,0,0,534,
        535,6,65,0,0,535,132,1,0,0,0,7,0,215,390,511,517,526,532,1,6,0,0
    ]

class ExampleDSLLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    EXPORT = 9
    IMPORT = 10
    INPUT = 11
    OUTPUT = 12
    REPORT = 13
    WRITE = 14
    COMBINE = 15
    COMPARISON_OPERATOR = 16
    CONVERT = 17
    ADD = 18
    RENAME = 19
    CHANGE = 20
    SORT = 21
    DELETE = 22
    APPLY = 23
    GENERATE = 24
    REORDER = 25
    GROUP = 26
    FILTER = 27
    SEARCH = 28
    REPLACE = 29
    REMOVE = 30
    SPLIT = 31
    RESIZE = 32
    SET = 33
    FILE = 34
    PATH = 35
    FORMAT = 36
    DATA = 37
    COLUMN = 38
    COLUMNS = 39
    TYPE = 40
    ROWS = 41
    ROW = 42
    CONDITION = 43
    VALUES = 44
    IN = 45
    RESULT = 46
    TO = 47
    WITH = 48
    AND = 49
    BY = 50
    FROM = 51
    WHERE = 52
    ON = 53
    OF = 54
    FOR = 55
    AS = 56
    SAVE = 57
    BASED = 58
    SUM = 59
    NEW = 60
    MULTIPLYING = 61
    DUPLICATE = 62
    NUMBER = 63
    STRING = 64
    ID = 65
    WS = 66

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "','", "'day'", "'month'", "'year'", "'('", "')'", "'>'", 
            "'export'", "'import'", "'input'", "'output'", "'report'", "'write'", 
            "'Combine'", "'Convert'", "'Add'", "'Rename'", "'Change'", "'Sort'", 
            "'Delete'", "'Apply'", "'Generate'", "'Reorder'", "'Group'", 
            "'Filter'", "'Search'", "'Replace'", "'Remove'", "'Split'", 
            "'Resize'", "'Set'", "'file'", "'path'", "'format'", "'data'", 
            "'column'", "'columns'", "'rows'", "'row'", "'condition'", "'values'", 
            "'in'", "'result'", "'to'", "'with'", "'and'", "'by'", "'from'", 
            "'where'", "'on'", "'of'", "'for'", "'as'", "'save'", "'based'", 
            "'sum'", "'new'", "'multiplying'", "'duplicate'" ]

    symbolicNames = [ "<INVALID>",
            "EXPORT", "IMPORT", "INPUT", "OUTPUT", "REPORT", "WRITE", "COMBINE", 
            "COMPARISON_OPERATOR", "CONVERT", "ADD", "RENAME", "CHANGE", 
            "SORT", "DELETE", "APPLY", "GENERATE", "REORDER", "GROUP", "FILTER", 
            "SEARCH", "REPLACE", "REMOVE", "SPLIT", "RESIZE", "SET", "FILE", 
            "PATH", "FORMAT", "DATA", "COLUMN", "COLUMNS", "TYPE", "ROWS", 
            "ROW", "CONDITION", "VALUES", "IN", "RESULT", "TO", "WITH", 
            "AND", "BY", "FROM", "WHERE", "ON", "OF", "FOR", "AS", "SAVE", 
            "BASED", "SUM", "NEW", "MULTIPLYING", "DUPLICATE", "NUMBER", 
            "STRING", "ID", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "EXPORT", "IMPORT", "INPUT", "OUTPUT", "REPORT", 
                  "WRITE", "COMBINE", "COMPARISON_OPERATOR", "CONVERT", 
                  "ADD", "RENAME", "CHANGE", "SORT", "DELETE", "APPLY", 
                  "GENERATE", "REORDER", "GROUP", "FILTER", "SEARCH", "REPLACE", 
                  "REMOVE", "SPLIT", "RESIZE", "SET", "FILE", "PATH", "FORMAT", 
                  "DATA", "COLUMN", "COLUMNS", "TYPE", "ROWS", "ROW", "CONDITION", 
                  "VALUES", "IN", "RESULT", "TO", "WITH", "AND", "BY", "FROM", 
                  "WHERE", "ON", "OF", "FOR", "AS", "SAVE", "BASED", "SUM", 
                  "NEW", "MULTIPLYING", "DUPLICATE", "NUMBER", "STRING", 
                  "ID", "WS" ]

    grammarFileName = "ExampleDSL.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


